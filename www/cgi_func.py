#!/usr/bin/python

"""//Help publishing results with CGI//
 
- > This module contains various functions to help the publication of web page and services generated by CGI.

- File: cgi_func.py

"""


import cgi
import cgitb
cgitb.enable()

def get_form_value(name="input"):
    """//Get the value from a web form using the HTTP GET method//

    - Arguments:
     - name --- The name of the form, as described by the HTML "name" in the <form> tag. It will use "input" as name as a default argument
    
    - The function returns the form content     

    - Note: Special HTML character are escaped before being returned by this function
        
    """
    if not isinstance(name,str):
        log.error("The name argument must be a string !")
        return None      
            
    form=cgi.FieldStorage()
    v=form.getvalue(name)
    if v is None:
        return None
    else:
        return cgi.escape(v)

def get_all_form_values():
    """//Get the values from all web forms using the HTTP GET method//

    - Arguments:
    
    - The function returns the form content     

    - Note: Special HTML character are escaped before being returned by this function
        
    """
    form=cgi.FieldStorage()
    res={}
    for k in form:
        v=form.getvalue(k)
        if v is None:
            res[k]=None
        else:
            res[k]=cgi.escape(v)

    return res


def print_form(inputs=["input"],radios={}):
    """//Print a HTML code containing web forms//

    - > The function prints a web form with several 
    ```
    <p>NAME <input type="text" name="NAME"/></p>
    ```
    lines, with NAME for each line defined by argument
            
    - Arguments:
     - inputs --- A list of string, containing the name of the form, as described by the HTML "name" in the <form> tag. It will use a the ["input"] list as a default argument, displaying a single "input" form. radios is a dict of string to list of string to display radio button.
        
    """
    if not isinstance(inputs,list):
        log.error("The inputs argument must be a list !")    
        return None
    for s in inputs:
        if not isinstance(s,str):
            log.error("The inputs argument must be a list of strings !")
            return None

    s= '''
<form action="" method="get">
%s
    ''' % '\n'.join(['<p>%s <input type="text" name="%s"/></p>' % (name,name) for name in inputs])
    
    for r in radios:
        name=r
        choices=radios[r]
        
        s+= '''
<p>%s
<select name="%s" id="%s">
%s
</select></p>
    ''' % (name,name,name, '\n'.join(['<option value="%s">%s</option>' % (c,c) for c in choices]))

    s+='''
<p><input type="submit"></p></form>'''
    
    print s



def print_header(title=''):
    """//Print the header of the HTML web page generated by CGI//
    
    - Arguments:
     - title --- The window title, as a string. '' is used as a default argument.   
    
    """
    if not isinstance(title,str):
        log.error("The title argument must be a string !")
        return None    
    
    print 'Content-type: text/html'
    print 
    print '''
<html>
<head>
<title>%s</title>
</head>
<body>
    ''' % title



def print_footer():
    """//Print the footer of the HTML web page generated by CGI//
            
    """
    print '''    
</body>
</html>
'''



def print_result(result):
    """//Print some information as it can be used as a result of the web function call//

    - > To be differentiated from other information on the web page, the result is enclosed by ``<div class="qos">...</div>`` tags.

    - Arguments:
     - result --- The result to publish   
    
    """
    try:
        print '<div class="qos">%s</div>' % result
    except ValueError as e:
        log.error("print_result result argument must be convertible in string")
        log.error(e)

def print_message(msg):
    """//Print a message on the Web page//

    - Arguments:
     - msg --- The message to print   
    
    """
    try:
        print '<p>%s</p>' % msg
    except ValueError as e:
        log.error("print_message msg argument must be convertible in string")
        log.error(e)


def print_raw(msg):
    """//Print a raw message on the Web page//

    - Arguments:
     - msg --- The message to print   
    
    """
    try:
        print '%s' % msg
    except ValueError as e:
        log.error("print_message msg argument must be convertible in string")
        log.error(e)





if __name__=="__main__":
    print_header()
    if get_form_value() is None:
        print "Please give your name"
        print_form()
    else:
        print 'Your name is ',get_form_value()
    print_footer()
